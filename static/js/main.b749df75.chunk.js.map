{"version":3,"sources":["LocalCases.js","App.js","serviceWorker.js","index.js"],"names":["LocalCases","statistics","AppBar","position","Toolbar","variant","Typography","color","update_date_time","Container","maxWidth","component","style","backgroundColor","height","Box","display","p","m","Grid","container","wrap","spacing","item","Avatar","xs","zeroMinWidth","noWrap","local_total_cases","local_total_number_of_individuals_in_hospitals","local_deaths","local_recovered","global_total_cases","global_deaths","global_recovered","App","useState","setStatistics","useEffect","getStats","a","fetch","response","json","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b749df75.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nconst LocalCases = ({statistics}) => {\r\n    return (\r\n        <div>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        #Covid19 Update : Last Updated Time {statistics.update_date_time}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth=\"sm\">\r\n                <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', height: '100vh' }} >\r\n                    <Box component=\"span\" display=\"flex\"  p={2} m={1}>\r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Local Total Cases</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>LTC</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.local_total_cases}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Total Number of Locales in the Hospitals</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>LTiH</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.local_total_number_of_individuals_in_hospitals}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box component=\"span\" display=\"flex\"  p={2} m={1}>\r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Local Deaths</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>LD</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.local_deaths}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Local Total Recoveries</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>LTR</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.local_recovered}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box component=\"span\" display=\"flex\"  p={2} m={1}>\r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Globle Total Cases</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>GTC</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.global_total_cases}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        \r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Globle Deaths</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>GD</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.global_deaths}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box component=\"span\" m={1}>\r\n                            <h3>Globle Recoverd</h3>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar>GR</Avatar>\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography variant=\"h6\" noWrap>{statistics.global_recovered}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n                </Typography>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocalCases;","import React,{useState, useEffect} from 'react';   \nimport './App.css';\nimport LocalCases from './LocalCases';\n// import GlobleCases from './GlobleCases';\n\nconst App = () => {\n\n  const [statistics, setStatistics] = useState([]);\n\n  useEffect( () => {\n    getStats();\n  }, []);\n\n  const getStats = async () => {\n    const response = await fetch(`https://hpb.health.gov.lk/api/get-current-statistical`);\n    const data = await response.json();\n    setStatistics(data.data);\n    //console.log(data.data)\n  }\nconsole.log(statistics);\n\n  return(\n    <div>\n      {/* <h2>Update Time {statistics.update_date_time}</h2>\n      {statistics.map(detail => (\n        <LocalCases statistics/>\n      ))} */}\n      {/* {statistics} */}\n      <LocalCases statistics={statistics} />\n      {/* <GlobleCases statistics={statistics}/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}